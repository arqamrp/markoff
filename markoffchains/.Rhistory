test <- matrix(c(0, 0.25, 0.5, 0.25, 0, 0,
0, 0.5, 0, 0.5, 0, 0,
0, 0, 0.25, 0, 0.75, 0,
0, 0.5, 0, 0.5, 0, 0,
0, 0, 0.75, 0, 0.25, 0,
0, 0.25, 0, 0.25, 0.5, 0
) , 6, 6, byrow = T)
test
comm_classes(test)
classify_classes(test)
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , [j]]
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
submtx(P, c(1,2))
submtx(test, c(1,2))
submtx(test, c(1, 3))
n_recur <- sum(classify_classes(test))
n_recur
which(as.logical(classify_classes(test)))
comm_classes(test)[2]
comm_classes(test)
comm_classes(test)[,2]
comm_classes(test)[2,]
mv <-comm_classes(test)[2,]
mv
which(mv)
which(as.logical(mv))
miv <- which(as.logical(mv))
miv
submtx(test, miv)
stable_recurrent<-function(P){
eigen_result <- eigen(t(P)) #left eigenvector
Q <- eigen_result$vectors[,  round( eigen_result$values, digits = 6) == 1] # eigenvector with eigenvalue 1
return(Q)
}
sm <- submtx(test, miv)
sm
srm <- stable_recurrent(sm)
srm
stable_recurrent<-function(P){
eigen_result <- eigen(t(P)) #left eigenvector
Q <- eigen_result$vectors[,  round( eigen_result$values, digits = 6) == 1] # eigenvector with eigenvalue 1
Q <- Q/sum(Q)
return(Q)
}
srm <- stable_recurrent(sm)
srm
srm
srm
mv
miv
miv
srm
mem_onehot() <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
}
mem_onehot() <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
mem_onehot(c(2,3),6)
mem_onehot(srm,6)
mem_onehot(miv,6)
mem_onehot(miv,6) %*% srm
mem_onehot(miv,6) %*% t(srm)
mem_onehot(miv,6)
srm
srm %*% mem_onehot(miv,6)
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
}
pjj(test)
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
}
pjj(test)
srm %*% mem_onehot(miv,6)
n <- dim(test)[1]
n
ans <- numeric(n)
ans
recur_vec <- which(as.logical(classify_classes(test)))
recur_vec
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
ans
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
#ans <- ans + srm %*% mem_onehot(miv, n)
}
mem_vec <- comm_classes(mtx)[2]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
mem_idx_vec
mem_vec <- comm_classes(mtx)[2]
mem_vec
mem_vec <- comm_classes(mtx)[2,]
mem_idx_vec <- which(as.logical(mem_vec))
mem_vec
mem_idx_vec
mem_vec <- comm_classes(test)[2,]
mem_idx_vec <- which(as.logical(mem_vec))
mem_idx_vec
srm <- stable_recurrent(submtx)
submtx <- submtx(test, mem_idx_vec)
submtx
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
submtx
ans
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
}
pjj(test)
pjj <- function(mtx){
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
}
pjj(test)
submtx(test, c(1,3))
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
submtx(test, c(1,3))
pjj <- function(mtx){
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
}
pjj(test)
pjj <- function(mtx){
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(miv, n)
}
return(ans)
}
pjj(test)
mem_vec <- comm_classes(test)[3,]
mem_idx_vec <- which(as.logical(mem_vec))
mem_idx_vec
submtx <- submtx(test, mem_idx_vec)
submtx
srm <- stable_recurrent(submtx)
srm
ans <- ans + srm %*% mem_onehot(miv, n)
ans
ans <- ans +
srm %*% mem_onehot(miv, n)
srm %*% mem_onehot(miv, n)
pjj <- function(mtx){
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(mem_idx_vec, n)
}
return(ans)
}
pjj(test)
submtx <- function(P, idx){
n <- length(idx)
ans <- matrix(0, n, n)
for(i in 1:n){
for(j in 1:n) ans[i,j] = P[ idx[i] , idx[j] ]
}
return(ans)
}
mem_onehot <- function(idx, n){
p <- length(idx)
ans <- matrix(0, p, n)
for(i in 1:p) ans[i, idx[i]] <- 1
return(ans)
}
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(mem_idx_vec, n)
}
return(ans)
}
pjj(test)
pjj(test) %*% c(1,1,1,1,1,1)
c(1,1,1,1,1,1) %*% pjj(test)
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- stable_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(mem_idx_vec, n)
}
ans <- matrix(1, n,1) %*% ans
return(ans)
}
pjj(test)
mtx = matrix(0.25, 4, 4)
stable_recurrent(mtx)
inf_recurrent<-function(P){
eigen_result <- eigen(t(P)) #left eigenvector
Q <- eigen_result$vectors[, round( eigen_result$values, digits = 6) == 1] # eigenvector with eigenvalue 1
Q <- Q/sum(Q)
return(Q)
}
classify_classes(test)
classify_states(test)
matrix(1, 6, 1) %*% classify_states(test)
matrix(1, 1, 6) %*% classify_states(test)
classify_states(test) %*% matrix(1, 1, 6)
classify_states(test) %*% matrix(1, 6, 1)
classify_states(test) %*% t(matrix(1, 6, 1))
matrix(1, 6, 1) %*% t(classify_states(test))
m2 <- matrix(1, 6, 1) %*% t(classify_states(test))
m2 * mtx
m2 *test
m3 <- m2 *test
m3 /rowSums(m3)
test
pjj(test)
mtx = test
for(i in 1:10){
mtx = mtx %*% P
}
for(i in 1:10){
mtx = mtx %*% test
}
mtx
pik <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
return(m4)
}
pik(test)
comm_classes(test)
pik(test) %*% comm_classes(test)
pik(test) %*% t(comm_classes(test))
comm_classes(test) %*% pik(test) %*% t(comm_classes(test))
pik(test) %*% t(comm_classes(test))
pik(test) %*% t(comm_classes(test)) %*% comm_classes(test)
pik <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
m5 <- comm_classes(mtx)
m6 <- m4 %*% t(m5) %*% m5
return(m6)
}
pik(test)
pik(test) %*% pjj(test)
pik(test) * pjj(test)
mtx
pik(test) * pjj(test) - mtx
sum(pik(test) * pjj(test) - mtx)
idx <- c(2,3)
P <- matrix(c(1,0,0, 0, 1, 0, 0, 0, 1), 3, 3, byrow =T)
submtx(P, idx)
steady_state <- function(mtx){
m1 <- matrix(1, n, 1) %*% pjj(mtx)
m2 <- pik(mtx)
m3 <- comm_classes(mtx)
m4 <- m2 %*% t(m3) %*% m3
return(m4 * m1)
}
pjj <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- inf_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(mem_idx_vec, n)
}
return(ans)
}
pik <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
#m5 <- comm_classes(mtx)
#m6 <- m4 %*% t(m5) %*% m5
return(m4)
}
steady_state(test)
steady_state(test) -mtx
steady_class_probs <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
return(m4)
}
steady_class_probs <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
return(m4)
}
steady_class_probs(tesyt)
steady_class_probs(test)
steady_class_probs <- function(mtx){
n <- dim(mtx)[1]
m2 <- matrix(1, n, 1) %*% t(classify_states(mtx))
m3 <- m2 * mtx
m4 <- m3/rowSums(m3)
m5 <- m4 %*% t(comm_classes(mtx) )
return(m5)
}
steady_class_probs(test)
steady_state <- function(mtx){
m1 <- matrix(1, n, 1) %*% pjj(mtx)
m2 <- steady_class_probs(mtx)
m3 <- comm_classes(mtx)
m4 <- m2 %*% m3
return(m4 * m1)
}
steady_state(test)
steady_return_probs <- function(mtx){
n <- dim(mtx)[1]
ans <- numeric(n)
recur_vec <- which(as.logical(classify_classes(test)))
for(i in recur_vec){
mem_vec <- comm_classes(mtx)[i,]
mem_idx_vec <- which(as.logical(mem_vec))
submtx <- submtx(mtx, mem_idx_vec)
srm <- inf_recurrent(submtx)
ans <- ans + srm %*% mem_onehot(mem_idx_vec, n)
}
return(ans)
}
steady_return_probs(test)
steady_state <- function(mtx){
m1 <- matrix(1, n, 1) %*% steady_return_probs(mtx)
m2 <- steady_class_probs(mtx)
m3 <- comm_classes(mtx)
m4 <- m2 %*% m3
return(m4 * m1)
}
steady_state(test)
setwd("~/projects/markoff/markoffchains")
devtools::document()
devtools::document()
rm(list = c("mem_onehot", "steady_class_probs", "steady_return_probs", "steady_state", "submtx"))
devtools::document()
devtools::document()
devtools::document()
?coomm
?comm_classes
library(markoffchains)
remove.packages("markoffchains")
runApp('~/projects/markoff/app/MarkoffChains')
comm_classes(test, list)
comm_classes(test, "list")
runApp('~/projects/markoff/app/MarkoffChains')
require(markoffchains)
print(require(markoffchains))
runApp('~/projects/markoff/app/MarkoffChains')
