K[i] <- rbinom( 1, n, theta[Z[i]] )
}
####
gamma_i_c_j <- function( i, c, j){
if(c == 1) p <- theta[j, 3]
else p <- 1 - theta[j,3]
ans <- p * dbinom(K[i], n, theta[j,c]) / (theta[j, 3] * dbinom(K[i], n,theta[j,1]) +  (1-theta[j,3]) * dbinom(K[i], n, theta[j,2]) )
return(ans)
}
EM_iteration <- function(j, theta){
gamma_i_c <- matrix(0, N,2)
for(i in 1:N){
gamma_i_c[i, 1] <- gamma_i_c_j(i, 1, j)
gamma_i_c[i, 2] <- gamma_i_c_j(i, 2, j)
}
theta_new <- numeric(3)
theta_new[1] <- sum(K[i] * gamma_i_c[,1])/(n*sum(gamma_i_c[,1]))
theta_new[2] <- sum(K[i] * gamma_i_c[,2])/(n*sum(gamma_i_c[,2]))
theta_new[3] <- sum(gamma_i_c[,1])/N
return(rbind(theta, theta_new))
}
eps <- 1e-2
theta0 <- rnorm(3, 0.5, 0.1)
theta <- t(as.matrix(theta0, 1,3))
theta
j <- 1
while( j ==1 || norm( as.matrix(theta[j,] - theta[j-1, ]) ) > eps ) {
theta <- EM_iteration(j, theta)
j = j+1
}
print(theta)
N <- 30 # no of observations
K <- numeric(N)
n <- 10 # no. of tosses in each observation
# shh
Z <- numeric(N)
theta <- c(0.2, 0.8, 0.4)
for(i in 1:length(K)){
Z[i] <- sample.int(2, 1, T, c(theta[3], 1- theta[3]))
K[i] <- rbinom( 1, n, theta[Z[i]] )
}
####
K
Z
sum(Z==1)
gamma_i_c_j <- function( i, c, j){
if(c == 1) p <- theta[j, 3]
else p <- 1 - theta[j,3]
ans <- p * dbinom(K[i], n, theta[j,c]) / (theta[j, 3] * dbinom(K[i], n,theta[j,1]) +  (1-theta[j,3]) * dbinom(K[i], n, theta[j,2]) )
return(ans)
}
theta0
theta0 <- c(0.2, 0.8, 0.4)
theta <- t(as.matrix(theta0, 1,3))
EM_iteration(1, theta)
N <- 300 # no of observations
K <- numeric(N)
n <- 20 # no. of tosses in each observation
# shh
Z <- numeric(N)
theta <- c(0.2, 0.8, 0.4)
for(i in 1:length(K)){
Z[i] <- sample.int(2, 1, T, c(theta[3], 1- theta[3]))
K[i] <- rbinom( 1, n, theta[Z[i]] )
}
####
K
Z
sum(Z==1)
sum(Z==2)
theta0 <- c(0.2, 0.8, 0.417)
theta <- t(as.matrix(theta0, 1,3))
EM_iteration(1, theta)
N <- 30 # no of observations
K <- numeric(N)
n <- 10 # no. of tosses in each observation
# shh
Z <- numeric(N)
theta <- c(0.2, 0.8, 0.4)
for(i in 1:length(K)){
Z[i] <- sample.int(2, 1, T, c(theta[3], 1- theta[3]))
K[i] <- rbinom( 1, n, theta[Z[i]] )
}
####
K
Z
sum(Z==2)
# import and inspect
Races<-read.table("http://stat4ds.rwth-aachen.de/data/ScotsRaces.dat", header=TRUE)
head(Races,3) # timeM for men, timeW for women
matrix(cbind(mean(Races$timeW),sd(Races$timeW),mean(Races$climb),sd(Races$climb),mean(Races$distance), sd(Races$distance)),nrow=2)
#visualise
pairs(~timeW+distance+climb, data=Races) #scatter plot matrix
cor(Races[,c("timeW","distance","climb")]) # correlation matrix
cor(Races[,c("timeW","distance","climb")]) # correlation matrix
cor(Races[-41,c("timeW","distance","climb")]) # correlation matrix
fit.d<-lm(timeW~distance,data=Races)# model E(timeW) as a linear function of distance
summary(fit.d)
LM.m_from_w = lm(timeM~ timeW, data = Races)
summary(LM.m_from_w)
Florida<-read.table("http://stat4ds.rwth-aachen.de/data/Florida.dat", header=TRUE)
install.packages("shinyMatrix")
library(shinyMatrix)
?matrixInput
shiny::runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
MATRIX(1/3, 3,3)
matrix(1/3, 3,3)
runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
install.packages("Rstan")
install.packages("rstan")
?P
permutation
?permut
perm = function(n, x) {
factorial(n) / factorial(n-x)
}
k <- 1/p
perm = function(n, x) {
factorial(n) / factorial(n-x)
}
p ,- 1/676
perm = function(n, x) {
factorial(n) / factorial(n-x)
}
k <- 676
for(i in 1:100){
if(perm(k, i)/k^i < 0.5 ) print(i)
}
perm = function(n, x) {
factorial(n) / factorial(n-x)
}
k <- 676
for(i in 1:100){
val <- perm(k, i)/k^i
if( val <= 0.5 ) print(i)
}
perm = function(n, x) {
factorial(n) / factorial(n-x)
}
k <- 676
for(i in 1:100){
val <- perm(k, i)/k^i
#if(val <= 0.5) print(i)
print(val)
}
perm(2,3)
perm(3,3)
perm(5,3)
?for
.
for(i in 1:100){
print(i)
#val <- perm(k, i)/k^i
#if(val <= 0.5) print(i)
#print(val)
}
perm(676,1)
perm = function(n, x) {
val = n
for(i in 1:n-x-1) val = val*i
}
perm(3,2)
perm = function(n, x) {
val = n
for(i in 1:n-x-1) val = val*i
return(val)
}
perm(3,2)
perm = function(n, x) {
val = n
for(i in 1:n-x-1) val = val*i
return(val)
}
perm(3,2)
perm = function(n, x) {
val = n
print(val)
for(i in 1:n-x-1) val = val*i
return(val)
}
perm(3,2)
perm = function(n, x) {
val = n
for(i in 2:n-x-1) val = val*i
return(val)
}
perm(3,2)
perm = function(n, x) {
j = n
for(i in 2:n-x-1) j = j*i
return(j)
}
perm(3,2)
perm = function(n, x) {
j = n
for(i in 2:(n-x-1)) j = j*i
return(j)
}
perm(3,2)
perm = function(n, x) {
j = n
for(i in 2:(n-x-1)) j = j*(n-i)
return(j)
}
perm(3,2)
perm = function(n, x) {
j = n
for(i in 1:(n-x-1)) j = j*(n-i)
return(j)
}
perm(3,2)
perm = function(n, x) {
j = n
for(i in 1:(n-x)) j = j*(n-i)
return(j)
}
perm(3,2)
for(i in 1:100){
val <- perm(k, i)/k^i
if(val <= 0.5) print(i)
print(val)
}
perm(676,1)
perm(6,1)
perm = function(n, x) {
j = n
for(i in 1:x) j = j*(n-i)
return(j)
}
perm(6,1)
perm = function(n, x) {
j = n
for(i in 1:x-1) j = j*(n-i)
return(j)
}
perm(6,1)
perm = function(n, x) {
j = n
for(i in 1:x-1) j = j*(n-i)
return(j)
}
perm(3,2)
p_fp <- 0.99 * 0.08
p_tp <- 0.01 * 0.9
p_fp/(p_fp + p_tp)
p_tp/(p_fp + p_tp)
p_f+p_tp
p_fp+p_tp
prob_d_given_t <_ function(prevalence, tp_rate, fp_rate){
prob_d_given_t <- function(prevalence, tp_rate, fp_rate){
tp <- prevalence * tp_rate
fp <- (1-prevalence) * fp_rate
return(tp/(tp+fp))
}
prob_d_given_t(0.01, 0.9, 0.08)
prev_data <- 1:100/100
sens_data <- 1:100/100
prev <- 0.01
fpr <- 0.08
?plot
plot(sens_data, prob_d_given_t(prev, sens_data, fpr))
prev <- 0.1
plot(sens_data, prob_d_given_t(prev, sens_data, fpr), pch =16)
sens_data <- 1:100/100
prev <- 0.01
fpr <- 0.08
plot(sens_data, prob_d_given_t(prev, sens_data, fpr), pch =16)
sens <- 0.9
prev <- 0.01
fpr <- 1:100/100
plot(sens, prob_d_given_t(prev, sens, fpr), pch =16)
plot(fpr, prob_d_given_t(prev, sens, fpr), pch =16)
sens <- 0.9
prev <- 0.1
fpr <- 1:100/100
plot(fpr, prob_d_given_t(prev, sens, fpr), pch =16)
sens <- 0.9
prev <- 1:100/100
fpr <- 0.08
plot(prev, prob_d_given_t(prev, sens, fpr), pch =16)
sens <- 1:100/100
prev <- 0.01
fpr <- 0.08
line(sens, prob_d_given_t(prev, sens, fpr), pch =16)
sens <- 1:100/100
prev <- 0.01
fpr <- 0.08
line(sens, prob_d_given_t(prev, sens, fpr))
sens <- 1:100/100
prev <- 0.01
fpr <- 0.08
plot(sens, prob_d_given_t(prev, sens, fpr), type = "l", col = "blue", )
# plot2: Prob(disease given positive test) vs sensitivity (prevalence = 0.1)
prev <- 0.1
lines(sens, prob_d_given_t(prev, sens, fpr), col = "red")
sens <- 1:100/100
fpr <- 0.08
prev <- 0.1
lines(sens, prob_d_given_t(prev, sens, fpr), col = "red")
prev <- 0.01
plot(sens, prob_d_given_t(prev, sens, fpr), type = "l", col = "blue", )
sens <- 1:100/100
fpr <- 0.08
prev <- 0.1
plot(sens, prob_d_given_t(prev, sens, fpr), col = "red")
prev <- 0.01
lines(sens, prob_d_given_t(prev, sens, fpr), type = "l", col = "blue", )
prev <- 0.1
plot(sens, prob_d_given_t(prev, sens, fpr), col = "red", type = "l",)
prev <- 0.01
lines(sens, prob_d_given_t(prev, sens, fpr), col = "blue", )
?plot
sens <- 1:100/100
fpr <- 0.08
prev <- 0.1
plot(sens, prob_d_given_t(prev, sens, fpr), col = "red", type = "l",xlab = "sensitivity", ylab = "Porbability of cancer given +")
prev <- 0.01
lines(sens, prob_d_given_t(prev, sens, fpr), col = "blue", )
legend("topleft", legend = c("prevalence = 0.01", "prevalence = 0.1"), lwd = 2, col = c("blue", "red"))
sens <- 0.9
fpr <- 1:100/100
prev <- 0.1
plot(sens, prob_d_given_t(prev, sens, fpr), col = "red", type = "l",xlab = "sensitivity", ylab = "Porbability of cancer given +")
sens <- 0.9
fpr <- 1:100/100
prev <- 0.1
plot(fpr, prob_d_given_t(prev, sens, fpr), col = "red", type = "l",xlab = "sensitivity", ylab = "Porbability of cancer given +")
prev <- 0.01
lines(fpr, prob_d_given_t(prev, sens, fpr), col = "blue", )
legend("topleft", legend = c("prevalence = 0.01", "prevalence = 0.1"), lwd = 2, col = c("blue", "red"))
sens <- 0.9
fpr <- 1:100/100
prev <- 0.1
plot(fpr, prob_d_given_t(prev, sens, fpr), col = "red", type = "l",xlab = "false positive rate", ylab = "Porbability of cancer given +")
prev <- 0.01
lines(fpr, prob_d_given_t(prev, sens, fpr), col = "blue", )
legend("topleft", legend = c("prevalence = 0.01", "prevalence = 0.1"), lwd = 2, col = c("blue", "red"))
sens <- 0.9
prev <- 1:100/100
fpr <- 0.08
plot(prev, prob_d_given_t(prev, sens, fpr), type = "l")
sens <- 0.9
prev <- 1:100/100
fpr <- 0.08
plot(prev, prob_d_given_t(prev, sens, fpr), type = "l",xlab = "eprevalence", ylab = "Porbability of cancer given +")
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample(1,1,0.5)
sample((0,1),1,0.5)
rbinom(1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
tennis <- function(p) {
win_count <- 0
set_count <- 0
while(set_count < 5 &  win_count < 3 & set_count - win_count < 3  ){
set_count = set_count +1
win_count = win_count + rbinom(1,1,p)
}
x <- set_coutn
return(x)
}
tennis()
tennis(0.5)
tennis <- function(p) {
win_count <- 0
set_count <- 0
while(set_count < 5 &  win_count < 3 & set_count - win_count < 3  ){
set_count = set_count +1
win_count = win_count + rbinom(1,1,p)
}
x <- set_count
return(x)
}
tennis <- function(p) {
win_count <- 0
set_count <- 0
while(set_count < 5 &  win_count < 3 & set_count - win_count < 3  ){
set_count = set_count +1
win_count = win_count + rbinom(1,1,p)
}
x <- set_count
return(x)
}
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
tennis(0.5)
matches <- numeric(1000)
for(i in 1:1000) {
matches[i] <- tennis90.7
}
for(i in 1:1000) {
matches[i] <- tennis(0.7)
}
ans <- mean(matches)
ans
idx <- sample(c(1,2,3), 1, T)
idx
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
sample(c(1,2,3), 1, T)
c(1,2,3) == 3
c(1,2,3)[c(1,2,3) == 3]
c(1,2,3)[c(1,2,3) != 3]
c(1,2,3)[c(1,2,3) == 3 & c(1,2,3) != 2 ]
c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 2 ]
MontyHall <- function(){
vec <- numeric(3)
idx <- sample(c(1,2,3), 1) # choose random door
vec[idx] <- 1 # car behind random door
choice <- sample(c(1,2,3), 1)  #contestant chooses random door
open <- sample(c(1,2,3)[c(1,2,3) != idx & c(1,2,3) != choice], 1) # monty hall opens a goated door other than the choice
new <- c(1,2,3)[c(1,2,3) != choice & c(1,2,3) != open] # switch
return(vec[new])
}
MontyHall
MontyHall()
MontyHall()
MontyHall()
MontyHall()
MontyHall()
cnt <- 0
for(i in 1:1e4){
cnt = cnt + MontyHall
}
cnt <- 0
for(i in 1:1e4){
cnt = cnt + MontyHall()
}
cnt
MontyHall <- function(){
vec <- numeric(3)
idx <- sample(c(1,2,3), 1) # choose random door
print(idx)
vec[idx] <- 1 # car behind random door
choice <- sample(c(1,2,3), 1)  #contestant chooses random door
print(choice)
open <- sample(c(1,2,3)[c(1,2,3) != idx & c(1,2,3) != choice], 1) # monty hall opens a goated door other than the choice
print(open)
new <- c(1,2,3)[c(1,2,3) != choice & c(1,2,3) != open] # switch
print(new)
return(vec[new])
}
MontyHall()
MontyHall()
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 2], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 2], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 2], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
sample(c(1,2,3)[c(1,2,3) != 3 & c(1,2,3) != 3], 1)
shiny::runApp('projects/markoff/app/MarkoffChains')
runApp('projects/markoff/app/MarkoffChains')
devtools::install_github("https://github.com/arqamrp/markoff/markoffchains", upgrade = TRUE)
install_github("arqamrp/markoff", subdir="markoffchains")
setwd("~/projects/markoff/markoffchains")
devtools::build_manual()
shiny::runApp('~/projects/markoff/app/MarkoffChains')
runApp('~/projects/markoff/app/MarkoffChains')
runApp('~/projects/markoff/app/MarkoffChains')
runApp('~/projects/markoff/app/MarkoffChains')
runApp('~/projects/markoff/app/MarkoffChains')
