absorbing_states <- function(P, mode = "binarr"){
n <- dim(P)[1]
ans <- ((P * diag(1, n, n)) %*% matrix(1, n, 1)  == 1)
if(mode == "binarr" ) return(ans)
else if (mode == "indices") return(which(ans))
}
mtx <- diag(1, 1e2 ,1e2)
which(absorbing_states(mtx))
absorbing_states(mtx)
absorbing_states <- function(P, mode = "binarr"){
n <- dim(P)[1]
ans <- ((P * diag(1, n, n)) %*% matrix(1, n, 1)  == 1)
if(mode == "binarr" ) return(ans + 0)
else if (mode == "indices") return(which(ans))
}
absorbing_states(mtx)
mtx2 <- matrix(1, 2, 3)
mtx2
is_stochastic <- function(P){
dp <- dim(P)
if(length(dp) ==2) if(dp[1] == dp[2]) if( setequal(rowSums(P),numeric(length = dp[1])+1)) return(TRUE)
else return(FALSE)
}
is_stochastic(mtx2)
is_stochastic(mtx2)
is_stochastic(matrix(1,2,3))
is_stochastic(matrix(1/3,3,3))
is_stochastic <- function(P){
dp <- dim(P)
if(length(dp) ==2 & dp[1] == dp[2] & setequal(rowSums(P),numeric(length = dp[1])+1)) return(TRUE)
else return(FALSE)
}
is_stochastic(matrix(1,2,3))
access <- function(P){
if(is_stochastic(P))
{
n <- dim(P)[1]
access_mtx <- matrix(0,n,n)
temp_mtx <- (P + diag(1,n,n))
# a state that is accessible can be reached in at most n - 1 steps
# check for states accessible in 1st, 2nd...(n-1)th steps
for(i in 1:n-1){
access_mtx <- (access_mtx + temp_mtx)
temp_mtx <- temp_mtx %*% P
}
return((access_mtx>0) +0)
}
else return("Invalid stochastic matrix")
}
mtx = diag(1/3, 3, 3)
access(mtx)
mtx
mtx = diag(1, 3, 3)
access(mtx)
mtx2 = matrix(1/3, 3, 3)
acces(mtx2)
access(mtx2)
diag(1,3,3)
!1
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # jth row means jth equivalent class
df <- as.data.frame(matrix(0, dim(eq_class)[1],1))
chars <- character(dim(eq_class)[1])
for(i in 1:dim(eq_class)[1]){
nom <- character(0)
for(j in 1:n){
if(eq_class[i,j] == 1) nom <- paste(nom, j)
}
chars[i] <- nom
}
rownames(df) <- foo
df[,1] <- chars
colnames(df) <- "elements"
if(mode == "visual") return(df)
}
}
mtx2 <- matrix(1/3, 3, 3)
reachable(mtx2, 1, 2)
eq_classes(mtx2, 1, 2)
eq_classes(mtx2)
eq_classes(mtx2, "visual")
mtx = diag(1, 3, 3)
eq_classes(mtx, 1, 2)
eq_classes(mtx)
output_list <- replicate(num_classes, list(), simplify = FALSE)
output_list <- replicate(5, list(), simplify = FALSE)
output_list
output_list[[1]]
else{
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # ith row means ith equivalent class
else if(mode = "list"){
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # ith row means ith equivalent class
else if(mode == "list"){
num_classes <- dim(eq_class)[1]
output_list <- replicate(num_classes, list(), simplify = FALSE)
for(i in 1:num_classes){
temp <- list()
for(j in 1:n){
if(eq_class[i,j] == 1) temp = c(temp, j)
}
output_list[[i]] <- temp
}
else if(mode == "visual"){
}
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # ith row means ith equivalent class
else if(mode == "list"){
num_classes <- dim(eq_class)[1]
output_list <- replicate(num_classes, list(), simplify = FALSE)
for(i in 1:num_classes){
temp <- list()
for(j in 1:n){
if(eq_class[i,j] == 1) temp = c(temp, j)
}
output_list[[i]] <- temp
}
}
}
}
mtx2 <- matrix(1/3, 3, 3)
source("~/.active-rstudio-document", echo=TRUE)
eq_classes(mtx2, "list")
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # ith row means ith equivalent class
else if(mode == "list"){
num_classes <- dim(eq_class)[1]
output_list <- replicate(num_classes, list(), simplify = FALSE)
for(i in 1:num_classes){
temp <- list()
for(j in 1:n){
if(eq_class[i,j] == 1) temp = c(temp, j)
}
output_list[[i]] <- temp
}
return(output_list)
}
}
}
eq_classes(mtx2, "list")
eq_classes <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
step_mtx <- ((P + diag(1,n,n))>0) + 0 # classes accessible in first step
access_mtx <- access(P)
commun_mtx <- access_mtx * t(access_mtx) # states which are accessible from each other communicate
eq_class <- unique(commun_mtx) # states belonging to same equivalent class communicate with same set of states
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(eq_class) <- foo
if(mode == "bin_arr") return(eq_class) # ith row means ith equivalent class
else if(mode == "list"){
num_classes <- dim(eq_class)[1]
output_list <- replicate(num_classes, list(), simplify = FALSE)
for(i in 1:num_classes){
temp <- c()
for(j in 1:n){
if(eq_class[i,j] == 1) temp = c(temp, j)
}
output_list[[i]] <- temp
}
return(output_list)
}
}
}
eq_classes(mtx2, "list")
eq_classes(mtx, "list")
classify_states <- function(P, mode = "bin_arr"){
if(!is_stochastic(P)) print("Invalid transition probability matrix")
else{
n <- dim(P)[1]
access_mtx <- access(P)
#commun_mtx <- access_mtx * t(access_mtx)
good_mtx <- access_mtx * (t(access_mtx) - access_mtx)
rt_state <- matrix((rowSums(good_mtx) ==0)+0,n,1)
if(mode == "bin_arr") return(rt_state)
else if(mode == "visual"){
vis <- as.data.frame(matrix(as.character(factor(rt_state, levels = c(0,1), labels = c("transient", "recurrent"))), n,1))
colnames(vis) <- "type"
return(vis)
}
}
}
classify_states(mtx2)
classify_states(mtx2, "visual")
mtx <- matrix(c(1, 0, 0, 0, 0, 1, 0, 1, 0 ), byrow =T)
source("~/.active-rstudio-document", echo=TRUE)
classify_states(mtx, "visual")
mtx
mtx <- matrix(c(1, 0, 0, 0, 0, 1, 0, 1, 0 ),3, 3, byrow =T)
classify_states(mtx, "visual")
mtx
mtx <- matrix(c(0, 1, 0, 0, 0, 1, 0, 1, 0 ),3, 3, byrow =T)
classify_states(mtx, "visual")
classify_classes <- function(P, mode = "bin_arr"){
n <- dim(P)[1]
eq_class <- eq_classes(P)
rt_state <- classify_states(P)
ans <- (eq_class %*% rt_state > 0)+0
y<- factor(ans, levels = c(0,1), labels = c("transient", "recurrent"))
y <- as.character(y)
df <- as.data.frame(matrix(0, dim(eq_class)[1],2))
chars <- character(dim(eq_class)[1])
for(i in 1:dim(eq_class)[1]){
nom <- character(0)
for(j in 1:n){
if(eq_class[i,j] == 1) nom <- paste(nom, j)
}
chars[i] <- nom
}
df[,1] <- chars
df[,2] <- y
colnames(df) <- c("elements", "type")
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(df) <- foo
if(mode == "bin_arr") return(ans)
else if(mode == "visual") return(df)
}
classify_classes(mtx, "visual")
classify_states(mtx)
classify_classes <- function(P, mode = "bin_arr"){
n <- dim(P)[1]
eq_class <- eq_classes(P)
rt_state <- classify_states(P)
ans <- (eq_class %*% rt_state > 0)+0
y<- factor(ans, levels = c(0,1), labels = c("transient", "recurrent"))
y <- as.character(y)
df <- as.data.frame(matrix(0, dim(eq_class)[1],2))
chars <- character(dim(eq_class)[1])
for(i in 1:dim(eq_class)[1]){
nom <- character(0)
for(j in 1:n){
if(eq_class[i,j] == 1) nom <- paste(nom, j)
}
chars[i] <- nom
}
df[,1] <- chars
df[,2] <- y
colnames(df) <- c("elements", "type")
foo <- character(0)
for(i in 1:dim(eq_class)[1]) foo <- c(foo, paste("class", i, sep= ""))
rownames(df) <- foo
if(mode == "bin_arr") return(ans)
else if(mode == "visual") return(df)
}
setwd("~/projects/markov_chains_R/prototype_0.1")
create("markoffchains")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
create("markoffchains")
setwd("~/projects/markov_chains_R/prototype_0.1/markoffchains/R")
document()
document()
document()
